#!/bin/bash
export PUPPET_COMPLETE=0
set -x

touch /tmp/firstboot.executed

export DOWNLOAD=$(if [ -x "/usr/bin/wget" ]; then echo "/usr/bin/wget -O "; else if [ -x "/usr/bin/curl" ]; then echo "/usr/bin/curl -o "; fi; fi)

notify_abcd() {
	$DOWNLOAD - -q @BASEURL@/notify/class/${1}/state/${2} >/dev/null
}

check_centos_5()		{ [[ "x$(grep -e "^CentOS Release 5." /etc/redhat-release)" 			!= "x" ]] && echo true || echo false; }
check_centos_6()		{ [[ "x$(grep -e "^CentOS Release 6." /etc/centos-release)" 			!= "x" ]] && echo true || echo false; }
check_sles_10()			{ [[ "x$(grep -e "^SUSE Linux Enterprise Server 10" /etc/SuSE-release)" != "x" ]] && echo true || echo false; }
check_sles_11()			{ [[ "x$(grep -e "^SUSE Linux Enterprise Server 11" /etc/SuSE-release)" != "x" ]] && echo true || echo false; }
check_opensuse_11()		{ [[ "x$(grep -e "^openSUSE 11" /etc/SuSE-release)" 					!= "x" ]] && echo true || echo false; }
check_opensuse_12()		{ [[ "x$(grep -e "^openSUSE 12" /etc/SuSE-release)" 					!= "x" ]] && echo true || echo false; }
check_opensuse_13()		{ [[ "x$(grep -e "^openSUSE 13" /etc/SuSE-release)" 					!= "x" ]] && echo true || echo false; }
check_debian_6()		{ [[ "x$(grep -e "6\." /etc/debian_version)"							!= "x" ]] && echo true || echo false; }
check_debian_7()		{ [[ "x$(grep -e "7\." /etc/debian_version)"							!= "x" ]] && echo true || echo false; }
check_debian_sid()		{ [[ "x$(grep -e "sid" /etc/debian_version)"							!= "x" ]] && echo true || echo false; }
check_ubuntu() 			{ [[ "x$(ls /etc/ubuntu_version)"										!= "x" ]] && echo true || echo false; }
check_gentoo()			{ [[ "x$(ls /etc/gentoo-release)"                                       != "x" ]] && echo true || echo false; }
check_fedora()			{ [[ "x$(ls /etc/fedora-release)"										!= "x" ]] && echo true || echo false; }
check_archlinux()		{ [[ "x$(ls /etc/arch-release)"											!= "x" ]] && echo true || echo false; }

os_selector() {	
	echo -e "\\nFirstboot-Script is executed" >/dev/tty1
	[[ "$(check_centos_5)"		= "true" ]] && ( firstboot_yum_based 59;		return )
	[[ "$(check_centos_6)"		= "true" ]] && ( firstboot_yum_based 64;		return )
	[[ "$(check_fedora)"		= "true" ]] && ( firstboot_yum_based fedora;	return )
	[[ "$(check_sles_10)"		= "true" ]] && ( firstboot_zypper_based 10; 			return )
	[[ "$(check_sles_11)"		= "true" ]] && ( firstboot_zypper_based 11;				return )
	[[ "$(check_opensuse_11)"	= "true" ]] && ( firstboot_zypper_based 11;			return )
	[[ "$(check_opensuse_12)"	= "true" ]] && ( firstboot_zypper_based 12;			return )
	[[ "$(check_opensuse_13)"	= "true" ]] && ( firstboot_zypper_based 13;			return )
	[[ "$(check_debian_6)"		= "true" ]] && ( firstboot_apt_based squeeze;	return )
	[[ "$(check_debian_7)"		= "true" ]] && ( firstboot_apt_based wheezy;	return )
	[[ "$(check_debian_sid)"	= "true" ]] && ( firstboot_apt_based sid;		return )
	[[ "$(check_ubuntu)"		= "true" ]] && ( firstboot_apt_based raring;	return )
	[[ "$(check_gentoo)"		= "true" ]] && ( firstboot_gentoo;				return )
	[[ "$(check_archlinux)"		= "true" ]] && ( firstboot_archlinux;			return )
}

firstboot_apt_based() {
	VERSION=${1}
	check_network_connectivity
	notify_abcd firstboot start-script
	notify_abcd firstboot install-software
	apt-get update && apt-get install -y bind9-host
	notify_abcd firstboot update-hostname
	system_update_hostname
	PUPPETSERVER=@PUPPETSERVER@
	notify_abcd puppet install
	REPODEB=/tmp/puppet-$$.deb
	wget -O $REPODEB http://apt.puppetlabs.com/puppetlabs-release-${VERSION}.deb
	dpkg -i $REPODEB
	rm $REPODEB
	apt-get update
	apt-get install -y puppet
	puppet_agent_config
	puppet_agent_register
	puppet_agent_cronjob
}

firstboot_zypper_based() {
	VERSION=${1}
	check_for_loginshell
	check_network_connectivity
	notify_abcd firstboot start-script
	notify_abcd firstboot install-software
	zypper update -f -y
	notify_abcd firstboot update-hostname
	system_update_hostname
	PUPPETSERVER=@PUPPETSERVER@
	notify_abcd puppet install
	zypper install -y -f puppet
	puppet_agent_config
	puppet_agent_register
	puppet_agent_cronjob
}

puppet_agent_config() {
	notify_abcd puppet configure
	echo > /etc/puppet/puppet.conf
	echo "[agent]" >> /etc/puppet/puppet.conf
	echo "server=@PUPPETSERVER@" >> /etc/puppet/puppet.conf
	echo "report=true" >> /etc/puppet/puppet.conf
	echo "pluginsync=true" >> /etc/puppet/puppet.conf
	echo "certname=$MYFQDN" >> /etc/puppet/puppet.conf
}

puppet_agent_register() {
	notify_abcd puppet register
	puppet agent -t --waitforcert 60
}

puppet_agent_cronjob() {
	notify_abcd puppet cronjob
	puppet resource cron puppet-agent ensure=present user=root minute=30 command='/usr/bin/puppet agent --onetime --no-daemonize --splay'
}

check_for_loginshell() {
	while true; do
		if [ "x$(ps aux | grep -i getty | grep tty)" != "x" ]; then
			return
		fi
		sleep 1
	done
}

check_network_connectivity() {
	if [ -x "$(which ping)" ]; then
		while true; do
			TARGET=$(ip route list match 0.0.0.0/0 | cut -f3 -d" ")
		  if [ "x$TARGET" != "x" ]; then
				ping -c1 $TARGET && break
			else
				sleep 15
		  fi
		done
		echo "Network is up" >/dev/tty1
	else
		ifup eth0
		while true; do
			if [ "x$(ip addr show eth0 | grep "inet ")" != "x" ]; then
				echo "Network may be functional now">/dev/tty1
				return
			fi
			sleep 1
		done
	fi
}

system_update_hostname() {
	MYFIRSTIP=$(echo $(ip addr show eth0) | sed -e "s#.*inet ##" | cut -f1 -d"/")
	MYFQDN=$(host $MYFIRSTIP | rev | cut -f1 -d" " | cut -b2- | rev )
	export MYFQDN=$MYFQDN
	MYDOMAIN=$(grep search /etc/resolv.conf | sed -e "s#search ##" | cut -f1 -d" ")
	[[ -z "$MYDOMAIN" ]] \
	&& export MYDOMAIN=$(echo $MYFQDN | cut -f2- -d.) \
	|| export MYDOMAIN=$MYDOMAIN
	[[ -z "$MYDOMAIN" ]] \
	&& export MYHOSTNAME=$(echo $MYFQDN | sed -e 's#\\..*##g') \
	|| export MYHOSTNAME=$(echo $MYFQDN | sed -e "s#\\.$MYDOMAIN##")
	echo "Detected hostname: $MYHOSTNAME" >/dev/tty1
	echo "$MYHOSTNAME" > /etc/hostname
	echo -e "127.0.0.1\tlocalhost.localdomain localhost\n$MYFIRSTIP\t$MYFQDN $MYHOSTNAME" > /etc/hosts
	hostname -F /etc/hostname
}

finish() {
	notify_abcd firstboot finished
	if [ "x$PUPPET_COMPLETE" = "x1" ];then
		rm $0
		#reboot
	fi
}

os_selector
finish
